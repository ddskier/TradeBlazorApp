@page "/sellform"


@using TradeBlazorApp.Data_Classes
@using Microsoft.EntityFrameworkCore
@using TradeBlazorApp.Business_Classes <!--Added Manually this and below 2 lines, eventually through Interaction 48 and others.. Also, it generated renderMode, should have been rendermode no caps -->
@rendermode InteractiveServer

@inject NavigationManager NavigationManager


@inject IStockService StockService
@inject QUOTEDBEntities quoteContext
@inject ACCOUNTDBEntities accountContext

<PageTitle>Sell Stock</PageTitle>


<!--Changing from isVisible to rather check login status -->
@if (GlobalSettings.LoggedIn)
{
    <div>
        <h3 class="white-label">Select the Number of Shares to Sell for Symbol @GlobalSettings.theCurrentHolding.QuoteSymbol</h3>
        <EditForm Model="@this" OnValidSubmit="@SellStock">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label class="white-label" for="numShares">Number of Shares:</label>
                <InputNumber @bind-Value="numShares" class="form-control" id="numShares" />
            </div>

            <button type="submit" class="std-button">Sell</button>


        </EditForm>

        <button class="std-button" @onclick="Hide">Return to Holdings</button>
        <label class="white-label"> @messageSell</label>
        <label class="red-label"> @messageBadSell</label>
    </div>

}
else
{
    <label class="red-label">You must login before you can buy stocks!</label>

}
<label class="red-label">@labelText</label>

@code {
    //  [Parameter]
    //  public Quote quote { get; set; }

    //Added above per ChatGTP Interaction 64, then took out per Interaction 66, stop trying to pass params, just use GlobalSettings.

    // public string symbol = ;           //Changed to public from private, so Quotes.Razor can reference when showing Buy.Blazor.  Now commented out, will be a parameter via
    //ChatGTP Interaction 64.  I must now fixup the calling page (Quotes,Razor) to pass the parameter 'symbol'.
    public bool isVisible = false;   //Changed to public from private, so Quotes.Razor can reference when showing Buy.Blazor
    public int? numShares;          //Changed to public from private, so Quotes.Razor can reference when showing Buy.Blazor
    public string labelText;        //Changed to public
    public string messageSell;       //Added for confirm message
    public string messageBadSell;

    // Method to show the component with the selected stock symbol:  I commented these out during UI fixup stage after getting to ChatGTP Interaction 64

    /* public void Show(string selectedSymbol)
         {
         symbol = selectedSymbol;
     isVisible = true;
     }

     // Method to hide the component

    */
    // Method to handle stock purchase

    private void Hide()
    {
        NavigationManager.NavigateTo("/holdings");
    }
    private async Task SellStock()
    {
        if (numShares.HasValue)
        {
            if (numShares <= GlobalSettings.theCurrentHolding.Quantity)
            {
                try
                {
                    StockService myStockService = new StockService(accountContext,quoteContext);
                    var result = await myStockService.Sell(GlobalSettings.theCurrentHolding.QuoteSymbol, numShares.Value); //Fixup Needed:  Changed this call via Interaction 47 with ChatGTP

                }
                catch (Exception e)
                {
                    labelText = e.ToString();
                }
                // Assume StockService is a service class you have to handle stock transactions

                messageSell = "You just sold " + numShares.Value + " of stock " + GlobalSettings.theCurrentQuote.Symbol + "!";
                messageBadSell = "";
                numShares = null; // Reset after purchase
            }
            // Hide(); // Hide the component after purchase
            // NavigationManager.NavigateTo("/quotes"); // Optionally navigate to a different page  -- I changed to navigate back to holdings vs "/"
            else
            {
                messageBadSell = "You Don't Hold That Many Shares, you only have " + GlobalSettings.theCurrentHolding.Quantity.ToString() + " for " + GlobalSettings.theCurrentQuote.Symbol + " to sell!";
            }
        }
        else
        {
            messageBadSell = "Please select a value for Number of Shares of stock " + GlobalSettings.theCurrentQuote.Symbol + " to sell!";
            numShares = null; // Reset after purchase
        }
    }
}
