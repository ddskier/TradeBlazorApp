namespace TradeBlazorApp.Business_Classes
{

    //The entire class code was completely generated by ChatGTP Interaction 3, from VB.NET app.
    //No changes required.
    using System;
    using System.Security.Cryptography;
    using System.Text;

    public sealed class SaltedHash
    {
        private readonly string _salt;
        private readonly string _hash;
        private const int SaltLength = 12;

        public string Salt => _salt;
        public string Hash => _hash;

        private SaltedHash(string s, string h)
        {
            _salt = s;
            _hash = h;
        }

        public SaltedHash()
        {
        }

        public static SaltedHash Create(string password)
        {
            var salt = CreateSalt();
            var hash = CalculateHash(salt, password);
            return new SaltedHash(salt, hash);
        }

        public static SaltedHash Create(string salt, string hash)
        {
            return new SaltedHash(salt, hash);
        }

        public bool Verify(string password)
        {
            var h = CalculateHash(_salt, password);
            return _hash.Equals(h);
        }

        private static string CreateSalt()
        {
            var r = CreateRandomBytes(SaltLength);
            return Convert.ToBase64String(r);
        }

        private static byte[] CreateRandomBytes(int len)
        {
            var r = new byte[len];
            using (var rng = new RNGCryptoServiceProvider())
            {
                rng.GetBytes(r);
            }
            return r;
        }

        private static string CalculateHash(string salt, string password)
        {
            var data = ToByteArray(salt + password);
            var hash = CalculateHash(data);
            return Convert.ToBase64String(hash);
        }

        private static byte[] CalculateHash(byte[] data)
        {
            using (var sha1 = new SHA1CryptoServiceProvider())
            {
                return sha1.ComputeHash(data);
            }
        }

        private static byte[] ToByteArray(string s)
        {
            return Encoding.UTF8.GetBytes(s);
        }
    }

}
