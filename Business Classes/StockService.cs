namespace TradeBlazorApp.Business_Classes
{
    //This code was generated by ChatGTP Interaction 59, except where notes any fixup/additions I did manually.
    using Microsoft.EntityFrameworkCore;
    using Microsoft.Data.SqlClient;
    using System;
    using System.Linq;
    using System.Threading.Tasks;
    using TradeBlazorApp.Data_Classes;
    using TradeBlazorApp.Components.Pages;

    //I added this interface manually, learning from my previous structure recommendations from ChatGTP when doing the login form.
    public interface IStockService
    {
        Task<String> Buy(string stockSymbol, int quantity);
        Task<String> Sell(string stockSymbol, int quantity);
    }

    

        public class StockService : IStockService   //I renamed the class from Stock to StockService, for clarity of pupose.
    {
        private readonly ACCOUNTDBEntities _accountContext;
        private readonly QUOTEDBEntities _quoteContext;

        public StockService(ACCOUNTDBEntities accountContext, QUOTEDBEntities quoteContext)
        {
            _accountContext = accountContext;
            _quoteContext = quoteContext;
        }

        public async Task<string> Buy(string stockSymbol, int quantity)
        {
            var orderDate = DateTime.Now;
            var message = string.Empty;

            try
            {
                var theAccount = await _accountContext.ACCOUNTPROFILE   //Manually fixed to point to ACCOUNTPRFILEs vs. what ChatGTP generated ("ACCOUNTs")
                    .FindAsync(GlobalSettings.theLoginAccount.UserId, GlobalSettings.theLoginAccount.AccountId);

                

                var newOrder = new Order   //Changed this to mirror my new class "Order" vs all Caps "ORDER"
                {
                    ACCOUNT_ACCOUNTID = theAccount.AccountId,  //Manually fixed to point to AccountID vs. what ChatGTP generated ("ACCOUNTID") interaction 23
                                                               //However, I have a type mistmatch between types decimal and Guid.  In each table, Orders and Account dedined as BigInt
                                                               //I adjusted type in Orders.cs generated code (from DDL/SQLServer), to type long (DB defines as BigInt)
                    COMPLETIONDATE = orderDate,
                    HOLDING_HOLDINGID = Guid.NewGuid(),
                    OPENDATE = orderDate,
                    ORDERFEE = 1.0M,
                    ORDERSTATUS = "open",
                    ORDERTYPE = "buy",
                    QUOTE_SYMBOL = stockSymbol,
                    // Assuming PRICE is a decimal type
                    PRICE = GlobalSettings.theCurrentQuote.Price, // You need to replace this with actual price retrieval logic
                    QUANTITY = quantity,
                    USERID = theAccount.UserId,   //Manually fixed to point to UserID vs. what ChatGTP generated (".PROFILE_USERID")  interaction 23, then fixed again after re-generating AccountProfile.cs from database schema directly
                    ORDERID = Guid.NewGuid()
                };

                //Note:  After generating model classes, I had to slightly fixup below code to match exact names of my DBSets/class names to match below.  Easy.
                var newHolding = new Holding      //From orginal code generated here, I had to "fixup" manually all the propertynames to match my newly generated Holdings.cs class (from all caps)
                {
                    AccountAccountId = theAccount.AccountId,
                    PurchaseDate = orderDate,
                    PurchasePrice = newOrder.PRICE,
                    Quantity = quantity,
                    QuoteSymbol = newOrder.QUOTE_SYMBOL,
                    UserId = newOrder.USERID,
                    HoldingId = newOrder.HOLDING_HOLDINGID
                };

                _accountContext.ORDER.Add(newOrder);
                _accountContext.HOLDING.Add(newHolding);
                await _accountContext.SaveChangesAsync();

                newOrder.ORDERSTATUS = "closed";
                await _accountContext.SaveChangesAsync();

                message = $"You just bought {quantity} shares of {stockSymbol}.";
            }
            catch (Exception ex)
            {
                // Handle exceptions
                throw;   //Manually modified to throw exception instead of display message here
            }

            return message;
        }

        public async Task<string> Sell(string stockSymbol, int quantity)
        {
            var orderDate = DateTime.Now;
            var message = string.Empty;

            try
            {
                
                    var results = await _quoteContext.Quotes
                        .Where(entity => entity.Symbol == GlobalSettings.theCurrentHolding.QuoteSymbol)
                        .ToListAsync();
                    GlobalSettings.theCurrentQuote = results[0];
                

                    var theAccount = await _accountContext.ACCOUNTPROFILE   //Manually fixed to point to ACCOUNTPRFILEs vs. what ChatGTP generated ("ACCOUNTs")
                    .FindAsync(GlobalSettings.theLoginAccount.UserId, GlobalSettings.theLoginAccount.AccountId);
                
                
                var newOrder = new Order  ////Had to fix FROM or to all CAPs as originally generated, to match "Order" class name
                {
                    ACCOUNT_ACCOUNTID = theAccount.AccountId,  //Had to fix FROM all CAPs as originally generated, to match "AccountId" property in DbSet
                    COMPLETIONDATE = orderDate,
                    HOLDING_HOLDINGID = Guid.NewGuid(),
                    OPENDATE = orderDate,
                    ORDERFEE = 1.0M,
                    ORDERSTATUS = "open",
                    ORDERTYPE = "sell",
                    QUOTE_SYMBOL = stockSymbol,
                    PRICE = GlobalSettings.theCurrentQuote.Price,   //Had to fix FROM all CAPs as originally generated, to match "Price" property in DbSet.  Also had a nullable to non nullable error
                                                    //Had to explicitly use theStock.Price.Value vs. just theStock.Price
                    QUANTITY = quantity,
                    USERID = theAccount.UserId,   //Had to fix FROM all CAPs as originally generated, to match "UserId" property in DbSet
                    ORDERID = Guid.NewGuid()
                };

                //Update Holding Quantity 
                GlobalSettings.theCurrentHolding.Quantity = GlobalSettings.theCurrentHolding.Quantity - quantity;

                //If new quantity is zero, delete the holding from the DB
                if (GlobalSettings.theCurrentHolding.Quantity == 0) 
                {
                    _accountContext.HOLDING.Remove(GlobalSettings.theCurrentHolding);
                }

               
                //Add the Order to the Orders Table
                _accountContext.ORDER.Add(newOrder);



                //Commit!
                                
                await _accountContext.SaveChangesAsync();

                newOrder.ORDERSTATUS = "closed";
                await _accountContext.SaveChangesAsync();

                message = $"You just sold {quantity} shares of {stockSymbol}.";
            }
            catch (Exception ex)
            {
                // Handle exceptions
                throw;   //Manually modified to throw exception instead of display message here
            }

            return message;
        }
    }

}
